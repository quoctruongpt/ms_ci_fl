#!/bin/bash

# Script ch√≠nh ƒë·ªÉ ch·∫°y CI/CD
# ============================

# X√°c ƒë·ªãnh ƒë∆∞·ªùng d·∫´n g·ªëc
ROOT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# M√†u s·∫Øc cho output
RED='üî¥'
GREEN='üü¢'
YELLOW='üü°'
NC='' # No Color

echo "xin ch√†o"

# Source c·∫•u h√¨nh Telegram
# if [ -f "$ROOT_DIR/ci/config/telegram_config.sh" ]; then
#     source "$ROOT_DIR/ci/config/telegram_config.sh"
    
#     # Ki·ªÉm tra c·∫•u h√¨nh Telegram
#     if [ -z "$TELEGRAM_BOT_TOKEN" ] || [ -z "$TELEGRAM_CHAT_ID" ]; then
#         echo -e "${RED}[L·ªñI] Thi·∫øu c·∫•u h√¨nh Telegram. Vui l√≤ng ki·ªÉm tra file ci/config/telegram_config.sh${NC}"
#         exit 1
#     fi
# else
#     echo -e "${RED}[L·ªñI] Kh√¥ng t√¨m th·∫•y file c·∫•u h√¨nh Telegram: ci/config/telegram_config.sh${NC}"
#     exit 1
# fi

# Source script th√¥ng b√°o Telegram
if [ -f "$ROOT_DIR/ci/scripts/telegram/notify.sh" ]; then
    source "$ROOT_DIR/ci/scripts/telegram/notify.sh"
else
    echo -e "${RED}[L·ªñI] Kh√¥ng t√¨m th·∫•y file script th√¥ng b√°o Telegram: ci/scripts/telegram/notify.sh${NC}"
    exit 1
fi

# M·∫∑c ƒë·ªãnh l√† x√¢y d·ª±ng cho Android v√† nh√°nh main cho c·∫£ Flutter v√† Unity
PLATFORM="android"
UNITY_VERSION="2022.3.57f1"
FLUTTER_BRANCH="main"
UNITY_BRANCH="main"
BUILD_TYPE="test"  # M·∫∑c ƒë·ªãnh l√† build test

# X·ª≠ l√Ω tham s·ªë
show_help() {
  echo "S·ª≠ d·ª•ng: $0 [options]"
  echo "Options:"
  echo "  -p, --platform <platform>     Ch·ªçn n·ªÅn t·∫£ng ƒë·ªÉ build (android ho·∫∑c ios). M·∫∑c ƒë·ªãnh: android"
  echo "  -u, --unity <version>         Ch·ªâ ƒë·ªãnh phi√™n b·∫£n Unity. M·∫∑c ƒë·ªãnh: 2022.3.57f1"
  echo "  -f, --flutter-branch <branch> Ch·ªâ ƒë·ªãnh git branch cho d·ª± √°n Flutter. M·∫∑c ƒë·ªãnh: main"
  echo "  -t, --unity-branch <branch>   Ch·ªâ ƒë·ªãnh git branch cho d·ª± √°n Unity. M·∫∑c ƒë·ªãnh: main"
  echo "  -b, --build-type <type>       Ch·ªâ ƒë·ªãnh lo·∫°i build (test ho·∫∑c release). M·∫∑c ƒë·ªãnh: test"
  echo "                                - test: Ch·ªâ build debug APK cho Android"
  echo "                                - release: Build release APK v√† AAB cho Android"
  echo "  -h, --help                    Hi·ªÉn th·ªã tr·ª£ gi√∫p n√†y"
}

# X·ª≠ l√Ω c√°c tham s·ªë d√≤ng l·ªánh
while [[ $# -gt 0 ]]; do
  key="$1"
  case $key in
    -p|--platform)
      PLATFORM="$2"
      shift 2
      ;;
    -u|--unity)
      UNITY_VERSION="$2"
      shift 2
      ;;
    -f|--flutter-branch)
      FLUTTER_BRANCH="$2"
      shift 2
      ;;
    -t|--unity-branch)
      UNITY_BRANCH="$2"
      shift 2
      ;;
    -b|--build-type)
      BUILD_TYPE="$2"
      shift 2
      ;;
    -h|--help)
      show_help
      exit 0
      ;;
    *)
      echo -e "${RED}[L·ªñI] Tham s·ªë kh√¥ng x√°c ƒë·ªãnh: $1${NC}"
      show_help
      exit 1
      ;;
  esac
done

# Ki·ªÉm tra gi√° tr·ªã platform h·ª£p l·ªá
if [[ ! "$PLATFORM" =~ ^(android|ios)$ ]]; then
  echo -e "${RED}[L·ªñI] Gi√° tr·ªã platform kh√¥ng h·ª£p l·ªá: $PLATFORM. H√£y s·ª≠ d·ª•ng android ho·∫∑c ios.${NC}"
  exit 1
fi

# Ki·ªÉm tra gi√° tr·ªã build_type h·ª£p l·ªá
if [[ ! "$BUILD_TYPE" =~ ^(test|release)$ ]]; then
  echo -e "${RED}[L·ªñI] Gi√° tr·ªã build_type kh√¥ng h·ª£p l·ªá: $BUILD_TYPE. H√£y s·ª≠ d·ª•ng test ho·∫∑c release.${NC}"
  exit 1
fi

# G·ª≠i th√¥ng b√°o b·∫Øt ƒë·∫ßu build
send_telegram_start "$PLATFORM" "$BUILD_TYPE" "$FLUTTER_BRANCH" "$UNITY_BRANCH"

echo -e "${YELLOW}B·∫Øt ƒë·∫ßu qu√° tr√¨nh CI cho platform: $PLATFORM${NC}"
echo -e "${YELLOW}Flutter branch: $FLUTTER_BRANCH${NC}"
echo -e "${YELLOW}Unity branch: $UNITY_BRANCH${NC}"
echo -e "${YELLOW}Lo·∫°i build: $BUILD_TYPE${NC}"

# Chuy·ªÉn ƒë·ªïi git branch th√¥ng qua script ri√™ng
echo -e "${YELLOW}Chuy·ªÉn ƒë·ªïi git branch...${NC}"
export ROOT_DIR
"$ROOT_DIR/ci/scripts/git/checkout_branch.sh" "$FLUTTER_BRANCH" "$UNITY_BRANCH"
if [[ $? -ne 0 ]]; then
  echo -e "${RED}[L·ªñI] Kh√¥ng th·ªÉ chuy·ªÉn ƒë·ªïi git branch. H√£y ki·ªÉm tra log ƒë·ªÉ bi·∫øt chi ti·∫øt.${NC}"
  # L·∫•y commit ·ªü ƒë√¢y kh√¥ng c√≤n √Ω nghƒ©a v√¨ checkout ƒë√£ th·∫•t b·∫°i, g·ª≠i th√¥ng b√°o l·ªói ngay
  send_telegram_error "$PLATFORM" "$BUILD_TYPE" "$FLUTTER_BRANCH" "N/A" "$UNITY_BRANCH" "N/A" "Git Checkout Failed" "Kh√¥ng th·ªÉ chuy·ªÉn ƒë·ªïi git branch"
  exit 1
fi

# L·∫•y commit hash v√† message c·ªßa Flutter v√† Unity SAU KHI checkout th√†nh c√¥ng
echo -e "${YELLOW}L·∫•y th√¥ng tin commit sau khi checkout...${NC}"
FLUTTER_COMMIT=$(cd "$ROOT_DIR/src/flutter_project" && git rev-parse --short HEAD)
FLUTTER_COMMIT_MSG=$(cd "$ROOT_DIR/src/flutter_project" && git log -1 --pretty=%B)
UNITY_COMMIT=$(cd "$ROOT_DIR/src/unity_project" && git rev-parse --short HEAD)
UNITY_COMMIT_MSG=$(cd "$ROOT_DIR/src/unity_project" && git log -1 --pretty=%B)

# G·ª≠i th√¥ng b√°o sau khi checkout th√†nh c√¥ng
CHECKOUT_MSG="‚úÖ *Checkout th√†nh c√¥ng!*
    ùë≠ Flutter: ${FLUTTER_BRANCH} - ${FLUTTER_COMMIT}
    ‚§∑ ${FLUTTER_COMMIT_MSG}
    ùì§ Unity: ${UNITY_BRANCH} - ${UNITY_COMMIT}
    ‚§∑ ${UNITY_COMMIT_MSG}"
send_google_chat_message "$CHECKOUT_MSG"

# Ki·ªÉm tra m√¥i tr∆∞·ªùng Unity
echo -e "${YELLOW}Ki·ªÉm tra m√¥i tr∆∞·ªùng Unity...${NC}"
"$ROOT_DIR/tools/unity_license_activation/check_unity.sh"

# Ki·ªÉm tra k·∫øt qu·∫£ c·ªßa script ki·ªÉm tra Unity
if [[ $? -eq 0 ]]; then
  echo -e "${GREEN}M√¥i tr∆∞·ªùng Unity OK. Ti·∫øp t·ª•c quy tr√¨nh...${NC}"
else
  echo -e "${RED}Ki·ªÉm tra m√¥i tr∆∞·ªùng Unity th·∫•t b·∫°i. H√£y c√†i ƒë·∫∑t Unity phi√™n b·∫£n $UNITY_VERSION tr∆∞·ªõc khi ti·∫øp t·ª•c.${NC}"
  send_telegram_error "$PLATFORM" "$BUILD_TYPE" "$FLUTTER_BRANCH" "$FLUTTER_COMMIT" "$UNITY_BRANCH" "$UNITY_COMMIT" "Unity Environment Check Failed" "Ki·ªÉm tra m√¥i tr∆∞·ªùng Unity th·∫•t b·∫°i. H√£y c√†i ƒë·∫∑t Unity phi√™n b·∫£n $UNITY_VERSION"
  exit 1
fi

# Ki·ªÉm tra m√¥i tr∆∞·ªùng Flutter
echo -e "${YELLOW}Ki·ªÉm tra m√¥i tr∆∞·ªùng Flutter...${NC}"
"$ROOT_DIR/tools/dependency_checker/check_flutter.sh" "$ROOT_DIR/src/flutter_project"

# Ki·ªÉm tra k·∫øt qu·∫£ c·ªßa script ki·ªÉm tra Flutter
flutter_check_status=$?
if [[ $flutter_check_status -eq 0 ]]; then
  echo -e "${GREEN}M√¥i tr∆∞·ªùng Flutter OK. Ti·∫øp t·ª•c quy tr√¨nh...${NC}"
elif [[ $flutter_check_status -eq 2 ]]; then
  echo -e "${YELLOW}M√¥i tr∆∞·ªùng Flutter c√≥ c·∫£nh b√°o nh∆∞ng c√≥ th·ªÉ ti·∫øp t·ª•c quy tr√¨nh. Ki·ªÉm tra log ƒë·ªÉ bi·∫øt chi ti·∫øt.${NC}"
else
  echo -e "${RED}Ki·ªÉm tra m√¥i tr∆∞·ªùng Flutter th·∫•t b·∫°i. Ki·ªÉm tra log ƒë·ªÉ bi·∫øt chi ti·∫øt.${NC}"
  send_telegram_error "$PLATFORM" "$BUILD_TYPE" "$FLUTTER_BRANCH" "$FLUTTER_COMMIT" "$UNITY_BRANCH" "$UNITY_COMMIT" "Flutter Environment Check Failed" "Ki·ªÉm tra m√¥i tr∆∞·ªùng Flutter th·∫•t b·∫°i"
  exit 1
fi

# Ki·ªÉm tra c√°c y√™u c·∫ßu c·ª• th·ªÉ cho n·ªÅn t·∫£ng ƒë√£ ch·ªçn
case $PLATFORM in
  android)
    echo -e "${YELLOW}Ki·ªÉm tra m√¥i tr∆∞·ªùng Android...${NC}"
    # Ki·ªÉm tra th√™m c√°c y√™u c·∫ßu c·ª• th·ªÉ cho Android n·∫øu c·∫ßn
    ;;
  ios)
    echo -e "${YELLOW}Ki·ªÉm tra m√¥i tr∆∞·ªùng iOS...${NC}"
    # Ki·ªÉm tra macOS
    if [[ "$OSTYPE" != "darwin"* ]]; then
      echo -e "${RED}[L·ªñI] Kh√¥ng th·ªÉ build cho iOS tr√™n h·ªá ƒëi·ªÅu h√†nh kh√¥ng ph·∫£i macOS.${NC}"
      send_telegram_error "$PLATFORM" "$BUILD_TYPE" "$FLUTTER_BRANCH" "$FLUTTER_COMMIT" "$UNITY_BRANCH" "$UNITY_COMMIT" "iOS Build Environment Error" "Kh√¥ng th·ªÉ build cho iOS tr√™n h·ªá ƒëi·ªÅu h√†nh kh√¥ng ph·∫£i macOS"
      exit 1
    fi
    ;;
esac

# Hi·ªÉn th·ªã th√¥ng tin build
echo -e "${GREEN}=========================================${NC}"
echo -e "${GREEN}   CI Build cho platform: $PLATFORM${NC}"
echo -e "${GREEN}   Flutter branch: $FLUTTER_BRANCH${NC}"
echo -e "${GREEN}   Unity branch: $UNITY_BRANCH${NC}"
echo -e "${GREEN}   Lo·∫°i build: $BUILD_TYPE${NC}"
echo -e "${GREEN}=========================================${NC}"

# Chuy·ªÉn ƒë·ªïi platform Unity sang platform t∆∞∆°ng ·ª©ng
echo -e "${YELLOW}Chuy·ªÉn ƒë·ªïi Unity platform sang $PLATFORM...${NC}"
"$ROOT_DIR/ci/scripts/unity_switch_platform.sh" "$PLATFORM" "$UNITY_VERSION"

# Ki·ªÉm tra k·∫øt qu·∫£ c·ªßa script chuy·ªÉn ƒë·ªïi platform
if [[ $? -eq 0 ]]; then
  echo -e "${GREEN}Chuy·ªÉn ƒë·ªïi Unity platform th√†nh c√¥ng.${NC}"
else
  echo -e "${RED}Chuy·ªÉn ƒë·ªïi Unity platform th·∫•t b·∫°i.${NC}"
  send_telegram_error "$PLATFORM" "$BUILD_TYPE" "$FLUTTER_BRANCH" "$FLUTTER_COMMIT" "$UNITY_BRANCH" "$UNITY_COMMIT" "Unity Platform Switch Failed" "Chuy·ªÉn ƒë·ªïi Unity platform th·∫•t b·∫°i"
  exit 1
fi

# Xu·∫•t Unity module cho Flutter
echo -e "${YELLOW}Xu·∫•t Unity module cho Flutter platform $PLATFORM...${NC}"
"$ROOT_DIR/ci/scripts/unity_export_module.sh" "$PLATFORM" "$UNITY_VERSION"

# Ki·ªÉm tra k·∫øt qu·∫£ c·ªßa vi·ªác xu·∫•t Unity module
if [[ $? -eq 0 ]]; then
  echo -e "${GREEN}Xu·∫•t Unity module th√†nh c√¥ng.${NC}"
  send_telegram_unity_export "success" "$PLATFORM" "$BUILD_TYPE" "$UNITY_BRANCH" "$UNITY_COMMIT"
else
  echo -e "${RED}Xu·∫•t Unity module th·∫•t b·∫°i.${NC}"
  send_telegram_unity_export "error" "$PLATFORM" "$BUILD_TYPE" "$UNITY_BRANCH" "$UNITY_COMMIT"
  send_telegram_error "$PLATFORM" "$BUILD_TYPE" "$FLUTTER_BRANCH" "$FLUTTER_COMMIT" "$UNITY_BRANCH" "$UNITY_COMMIT" "Unity Export Failed" "Xu·∫•t Unity module th·∫•t b·∫°i"
  exit 1
fi

# Th·ª±c hi·ªán build d·ª± √°n Flutter cho t·ª´ng n·ªÅn t·∫£ng
echo -e "${YELLOW}Ti·∫øn h√†nh build Flutter cho $PLATFORM...${NC}"

# Ki·ªÉm tra v√† sao ch√©p file .env
echo -e "${YELLOW}Ki·ªÉm tra file m√¥i tr∆∞·ªùng...${NC}"
if [ ! -f "$ROOT_DIR/src/flutter_project/.env.dev" ] || [ ! -f "$ROOT_DIR/src/flutter_project/.env.prod" ]; then
    echo -e "${YELLOW}Sao ch√©p file .env t·ª´ th∆∞ m·ª•c env...${NC}"
    
    # Sao ch√©p .env.dev v·ªõi log l·ªói chi ti·∫øt
    if ! cp "$ROOT_DIR/env/.env.dev" "$ROOT_DIR/src/flutter_project/.env.dev" 2> /tmp/cp_error.log; then
        error_msg=$(cat /tmp/cp_error.log)
        echo -e "${RED}[L·ªñI] Kh√¥ng th·ªÉ sao ch√©p file .env.dev${NC}"
        echo -e "${RED}Chi ti·∫øt l·ªói: $error_msg${NC}"
        send_telegram_error "$PLATFORM" "$BUILD_TYPE" "$FLUTTER_BRANCH" "$FLUTTER_COMMIT" "$UNITY_BRANCH" "$UNITY_COMMIT" "Environment Setup Failed" "Kh√¥ng th·ªÉ sao ch√©p file .env.dev: $error_msg"
        rm -f /tmp/cp_error.log
        exit 1
    fi
    
    # Sao ch√©p .env.prod v·ªõi log l·ªói chi ti·∫øt
    if ! cp "$ROOT_DIR/env/.env.prod" "$ROOT_DIR/src/flutter_project/.env.prod" 2> /tmp/cp_error.log; then
        error_msg=$(cat /tmp/cp_error.log)
        echo -e "${RED}[L·ªñI] Kh√¥ng th·ªÉ sao ch√©p file .env.prod${NC}"
        echo -e "${RED}Chi ti·∫øt l·ªói: $error_msg${NC}"
        send_telegram_error "$PLATFORM" "$BUILD_TYPE" "$FLUTTER_BRANCH" "$FLUTTER_COMMIT" "$UNITY_BRANCH" "$UNITY_COMMIT" "Environment Setup Failed" "Kh√¥ng th·ªÉ sao ch√©p file .env.prod: $error_msg"
        rm -f /tmp/cp_error.log
        exit 1
    fi
    
    rm -f /tmp/cp_error.log
    echo -e "${GREEN}ƒê√£ sao ch√©p file .env th√†nh c√¥ng${NC}"
else
    echo -e "${GREEN}C√°c file .env ƒë√£ t·ªìn t·∫°i${NC}"
fi

case $PLATFORM in
  android)
    # Build cho Android
    echo -e "${YELLOW}Build ·ª©ng d·ª•ng Android...${NC}"
    BUILD_URLS=$("$ROOT_DIR/ci/scripts/flutter/build_android.sh" "$BUILD_TYPE")
    if [[ $? -eq 0 ]]; then
      APK_URL=$(echo "$BUILD_URLS" | grep -o 'https://[^ ]*')
        
        # L·∫•y th√¥ng tin version t·ª´ app/build.gradle
        echo -e "${YELLOW}L·∫•y th√¥ng tin version t·ª´ app/build.gradle...${NC}"
        
        # ƒê·ªçc versionName t·ª´ app/build.gradle
        VERSION_NAME=$(grep -o 'versionName\s*=\s*"[0-9.]*"' "$ROOT_DIR/src/flutter_project/android/app/build.gradle.kts" | sed 's/.*"\\(.*\\)".*/\\1/')
                
        # ƒê·ªçc versionCode t·ª´ app/build.gradle
        VERSION_CODE=$(grep -o "versionCode\s*=\s*[0-9]*" "$ROOT_DIR/src/flutter_project/android/app/build.gradle.kts" | grep -o "[0-9]*")
        
        # G·ª≠i th√¥ng b√°o ho√†n th√†nh
        send_telegram_finish "$PLATFORM" "$BUILD_TYPE" "$FLUTTER_BRANCH" "$FLUTTER_COMMIT" "$FLUTTER_COMMIT_MSG" "$UNITY_BRANCH" "$UNITY_COMMIT" "$UNITY_COMMIT_MSG" "$VERSION_CODE" "$VERSION_NAME" "$APK_URL"
    else
      echo -e "${RED}[L·ªñI] Build Android th·∫•t b·∫°i.${NC}"
      send_telegram_error "$PLATFORM" "$BUILD_TYPE" "$FLUTTER_BRANCH" "$FLUTTER_COMMIT" "$UNITY_BRANCH" "$UNITY_COMMIT" "Android Build Failed" "Build Android th·∫•t b·∫°i"
      exit 1
    fi
    ;;
  ios)
    # Build cho iOS v√† ch·∫°y fastlane
    echo -e "${YELLOW}Build ·ª©ng d·ª•ng iOS v√† ch·∫°y fastlane...${NC}"
    
    # Clean v√† get dependencies cho d·ª± √°n Flutter
    echo -e "${YELLOW}Clean v√† get dependencies cho d·ª± √°n Flutter...${NC}"
    cd "$ROOT_DIR/src/flutter_project" 
    flutter clean
    flutter pub get
    if [[ $? -ne 0 ]]; then
      echo -e "${RED}[L·ªñI] flutter clean ho·∫∑c flutter pub get th·∫•t b·∫°i.${NC}"
      send_telegram_error "$PLATFORM" "$BUILD_TYPE" "$FLUTTER_BRANCH" "$FLUTTER_COMMIT" "$UNITY_BRANCH" "$UNITY_COMMIT" "Flutter Clean/Get Failed (iOS)" "flutter clean ho·∫∑c flutter pub get th·∫•t b·∫°i cho iOS"
      exit 1
    fi
    
    # Precache Flutter engine cho iOS
    echo -e "${YELLOW}ƒêang precache Flutter engine cho iOS...${NC}"
    flutter precache --ios
    if [[ $? -ne 0 ]]; then
      echo -e "${RED}[L·ªñI] flutter precache --ios th·∫•t b·∫°i.${NC}"
      send_telegram_error "$PLATFORM" "$BUILD_TYPE" "$FLUTTER_BRANCH" "$FLUTTER_COMMIT" "$UNITY_BRANCH" "$UNITY_COMMIT" "Flutter Precache Failed (iOS)" "flutter precache --ios th·∫•t b·∫°i"
      exit 1
    fi
    
    cd "$ROOT_DIR/src/flutter_project/ios"
    if [[ $? -ne 0 ]]; then
      echo -e "${RED}[L·ªñI] Kh√¥ng th·ªÉ chuy·ªÉn ƒë·∫øn th∆∞ m·ª•c flutter_project/ios.${NC}"
      send_telegram_error "$PLATFORM" "$BUILD_TYPE" "$FLUTTER_BRANCH" "$FLUTTER_COMMIT" "$UNITY_BRANCH" "$UNITY_COMMIT" "iOS Directory Error" "Kh√¥ng th·ªÉ chuy·ªÉn ƒë·∫øn th∆∞ m·ª•c flutter_project/ios"
      exit 1
    fi
    
    echo -e "${YELLOW}ƒêang d·ªçn d·∫πp pod...${NC}"
    pod cache clean --all
    rm -rf Pods/
    rm -f Podfile.lock
    
    echo -e "${YELLOW}Ch·∫°y pod install...${NC}"
    pod install
    
    # T·∫°o th∆∞ m·ª•c logs n·∫øu ch∆∞a t·ªìn t·∫°i
    mkdir -p "$ROOT_DIR/logs"
    
    # T·∫°o t√™n file log v·ªõi timestamp
    TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
    FASTLANE_LOG="$ROOT_DIR/logs/fastlane_${TIMESTAMP}.log"
    
    # Ch·∫°y fastlane beta v√† l∆∞u log
    echo -e "${YELLOW}Ch·∫°y fastlane beta...${NC}"
    echo -e "${YELLOW}Log s·∫Ω ƒë∆∞·ª£c l∆∞u t·∫°i: $FASTLANE_LOG${NC}"
    
    # Ki·ªÉm tra ƒë√£ c√†i ƒë·∫∑t fastlane ch∆∞a v√† phi√™n b·∫£n c√≥ ph·∫£i l√† 2.227.0 kh√¥ng
    echo -e "${YELLOW}Ki·ªÉm tra phi√™n b·∫£n fastlane...${NC}"
   
      fastlane_version=$(fastlane --version | head -n1 | grep -o '[0-9.]*')
      echo -e "${GREEN}ƒê√£ ph√°t hi·ªán fastlane phi√™n b·∫£n $fastlane_version.${NC}"
      
      # N·∫øu phi√™n b·∫£n kh√¥ng ƒë√∫ng, ch·ªâ c·∫£nh b√°o nh∆∞ng kh√¥ng b·∫Øt bu·ªôc c·∫≠p nh·∫≠t
      if [[ "$fastlane_version" != "2.227.0" ]]; then
        echo -e "${YELLOW}C·∫£nh b√°o: Phi√™n b·∫£n fastlane ƒë∆∞·ª£c khuy·∫øn ngh·ªã l√† 2.227.0, nh∆∞ng ƒëang d√πng $fastlane_version.${NC}"
        echo -e "${YELLOW}Ti·∫øp t·ª•c ch·∫°y v·ªõi phi√™n b·∫£n hi·ªán t·∫°i. N·∫øu g·∫∑p v·∫•n ƒë·ªÅ, h√£y c·∫≠p nh·∫≠t th·ªß c√¥ng.${NC}"
      else
        echo -e "${GREEN}Fastlane 2.227.0 ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t.${NC}"
      fi
    
    
    fastlane beta 2>&1 | tee -a "$FASTLANE_LOG"
    fastlane_status=${PIPESTATUS[0]}

    if [[ $fastlane_status -eq 0 ]]; then
      echo "‚úÖ Build th√†nh c√¥ng"
    else
      echo "‚ùå Build th·∫•t b·∫°i"
      exit 1
    fi

     # L·∫•y th√¥ng tin version tr∆∞·ªõc khi build
    echo -e "${YELLOW}L·∫•y th√¥ng tin version...${NC}"
    version_info=$(fastlane get_version)
     # C√°ch ƒë√∫ng ƒë·ªÉ l·∫•y version t·ª´ output c·ªßa fastlane
    if echo "$version_info" | grep -q "\[.*\]: Version Code:"; then
      version_code=$(echo "$version_info" | grep "\[.*\]: Version Code:" | head -1 | sed 's/.*Version Code: //')
      version_name=$(echo "$version_info" | grep "\[.*\]: Version Name:" | head -1 | sed 's/.*Version Name: //')
    else
      # Fallback n·∫øu kh√¥ng t√¨m th·∫•y theo ƒë·ªãnh d·∫°ng tr√™n
      version_code=$(echo "$version_info" | grep "Version Code:" | head -1 | cut -d':' -f2 | tr -d ' ')
      version_name=$(echo "$version_info" | grep "Version Name:" | head -1 | cut -d':' -f2 | tr -d ' ')
    fi
    
    # Ki·ªÉm tra k·∫øt qu·∫£ c·ªßa fastlane
    if [[ ${PIPESTATUS[0]} -eq 0 ]]; then
      echo -e "${GREEN}Build iOS v√† upload l√™n TestFlight th√†nh c√¥ng.${NC}"
      
      # G·ª≠i th√¥ng b√°o ho√†n th√†nh v·ªõi version t·ª´ Fastlane
      send_telegram_finish \
        "$PLATFORM" \
        "$BUILD_TYPE" \
        "$FLUTTER_BRANCH" \
        "$FLUTTER_COMMIT" \
        "$FLUTTER_COMMIT_MSG" \
        "$UNITY_BRANCH" \
        "$UNITY_COMMIT" \
        "$UNITY_COMMIT_MSG" \
        "$version_code" \
        "$version_name"
    else
      echo -e "${RED}[L·ªñI] Build iOS ho·∫∑c upload l√™n TestFlight th·∫•t b·∫°i.${NC}"
      echo -e "${RED}Ki·ªÉm tra log t·∫°i: $FASTLANE_LOG${NC}"
      send_telegram_error "$PLATFORM" "$BUILD_TYPE" "$FLUTTER_BRANCH" "$FLUTTER_COMMIT" "$UNITY_BRANCH" "$UNITY_COMMIT" "iOS Build Failed" "Build iOS ho·∫∑c upload l√™n TestFlight th·∫•t b·∫°i"
      exit 1
    fi
    ;;
esac

echo -e "${GREEN}Qu√° tr√¨nh CI ho√†n t·∫•t th√†nh c√¥ng!${NC}"
echo -e "${GREEN}S·∫£n ph·∫©m build ƒë∆∞·ª£c l∆∞u trong th∆∞ m·ª•c: ${ROOT_DIR}/artifacts/${PLATFORM}${NC}" 