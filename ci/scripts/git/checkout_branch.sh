#!/bin/bash

# Script chuy·ªÉn ƒë·ªïi git branch
# =============================

# M√†u s·∫Øc cho output
RED='üî¥'
GREEN='üü¢'
YELLOW='üü°'
NC='' # No Color

# X√°c ƒë·ªãnh ƒë∆∞·ªùng d·∫´n g·ªëc n·∫øu ch∆∞a ƒë∆∞·ª£c truy·ªÅn v√†o
if [[ -z "$ROOT_DIR" ]]; then
  ROOT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/../../../" && pwd)"
fi

# H√†m checkout branch
checkout_branch() {
  local project_type="$1"  # 'flutter' ho·∫∑c 'unity'
  local branch="$2"
  local project_dir="$3"

  echo -e "${YELLOW}Chuy·ªÉn ƒë·ªïi $project_type branch sang '$branch'...${NC}"

  # Ki·ªÉm tra git repository
  if [[ ! -d "$project_dir/.git" ]]; then
    echo -e "${RED}[L·ªñI] Kh√¥ng t√¨m th·∫•y git repository cho d·ª± √°n $project_type t·∫°i: $project_dir${NC}"
    return 1
  fi

  # L∆∞u th∆∞ m·ª•c hi·ªán t·∫°i
  local current_dir=$(pwd)
  
  # Di chuy·ªÉn ƒë·∫øn th∆∞ m·ª•c d·ª± √°n
  cd "$project_dir"

  echo "Clean git"
  git reset --hard
  git clean -f -d

  # Fetch m·ªõi nh·∫•t t·ª´ origin
  echo -e "${YELLOW}ƒêang fetch t·ª´ remote...${NC}"
  git fetch origin

  # Ki·ªÉm tra xem branch c√≥ t·ªìn t·∫°i kh√¥ng
  if git show-ref --quiet "refs/remotes/origin/$branch"; then
    # Th·ª≠ checkout branch hi·ªán c√≥, n·∫øu kh√¥ng c√≥ th√¨ t·∫°o m·ªõi t·ª´ origin
    if git checkout "$branch" 2>/dev/null; then
      echo -e "${GREEN}ƒê√£ checkout branch $branch${NC}"
    else
      echo -e "${YELLOW}Branch $branch ch∆∞a t·ªìn t·∫°i c·ª•c b·ªô, ƒëang t·∫°o m·ªõi t·ª´ origin...${NC}"
      if git checkout -b "$branch" "origin/$branch"; then
        echo -e "${GREEN}ƒê√£ t·∫°o v√† checkout branch m·ªõi $branch t·ª´ origin/$branch${NC}"
      else
        echo -e "${RED}[L·ªñI] Kh√¥ng th·ªÉ checkout ho·∫∑c t·∫°o branch: $branch${NC}"
        cd "$current_dir"
        return 1
      fi
    fi

    # Pull m·ªõi nh·∫•t t·ª´ origin
    echo -e "${YELLOW}ƒêang pull m·ªõi nh·∫•t t·ª´ remote...${NC}"
    if git pull origin "$branch"; then
      echo -e "${GREEN}ƒê√£ c·∫≠p nh·∫≠t $project_type branch: $branch${NC}"
    else
      echo -e "${RED}[L·ªñI] Kh√¥ng th·ªÉ pull t·ª´ origin/$branch${NC}"
      cd "$current_dir"
      return 1
    fi
  else
    echo -e "${RED}[L·ªñI] $project_type branch kh√¥ng t·ªìn t·∫°i tr√™n remote: $branch${NC}"
    cd "$current_dir"
    return 1
  fi

  # Tr·ªü v·ªÅ th∆∞ m·ª•c ban ƒë·∫ßu
  cd "$current_dir"
  return 0
}

# H√†m ch√≠nh
main() {
  local flutter_branch="$1"
  local unity_branch="$2"
  
  # ƒê∆∞·ªùng d·∫´n ƒë·∫øn c√°c d·ª± √°n
  local flutter_project_dir="${ROOT_DIR}/src/flutter_project"
  local unity_project_dir="${ROOT_DIR}/src/unity_project"

  # Checkout Flutter branch
  checkout_branch "Flutter" "$flutter_branch" "$flutter_project_dir"
  if [[ $? -ne 0 ]]; then
    exit 1
  fi

  # Checkout Unity branch
  checkout_branch "Unity" "$unity_branch" "$unity_project_dir"
  if [[ $? -ne 0 ]]; then
    exit 1
  fi

  echo -e "${GREEN}[OK] T·∫•t c·∫£ branch ƒë√£ ƒë∆∞·ª£c checkout th√†nh c√¥ng.${NC}"
  return 0
}

# Ki·ªÉm tra xem script c√≥ ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp kh√¥ng (kh√¥ng ph·∫£i ƒë∆∞·ª£c source)
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  # C√°c gi√° tr·ªã m·∫∑c ƒë·ªãnh
  FLUTTER_BRANCH=${1:-"main"}
  UNITY_BRANCH=${2:-"main"}

  # Hi·ªÉn th·ªã th√¥ng tin
  echo "=== CHUY·ªÇN ƒê·ªîI GIT BRANCH ==="
  echo "Flutter branch: $FLUTTER_BRANCH"
  echo "Unity branch: $UNITY_BRANCH"

  # Ch·∫°y h√†m ch√≠nh
  main "$FLUTTER_BRANCH" "$UNITY_BRANCH"
  exit $?
fi 