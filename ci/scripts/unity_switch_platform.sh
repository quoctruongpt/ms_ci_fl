#!/bin/bash

# Script chuy·ªÉn ƒë·ªïi platform Unity
# ================================

# M√†u s·∫Øc cho output
RED='üî¥'
GREEN='üü¢'
YELLOW='üü°'
NC='' # N

# ƒê∆∞·ªùng d·∫´n
ROOT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd)"
UNITY_PROJECT_DIR="${ROOT_DIR}/src/unity_project"
LOG_DIR="${ROOT_DIR}/logs/unity"

# ƒê·∫£m b·∫£o th∆∞ m·ª•c log t·ªìn t·∫°i
mkdir -p "$LOG_DIR"

# Ph√°t hi·ªán h·ªá ƒëi·ªÅu h√†nh
detect_os() {
  if [[ "$OSTYPE" == "darwin"* ]]; then
    echo "macos"
  elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
    echo "linux"
  else
    echo "unsupported"
  fi
}

# L·∫•y ƒë∆∞·ªùng d·∫´n Unity d·ª±a tr√™n h·ªá ƒëi·ªÅu h√†nh
get_unity_path() {
  local unity_version="$1"
  local detected_os=$(detect_os)

  if [[ "$detected_os" == "macos" ]]; then
    echo "/Applications/Unity/Hub/Editor/$unity_version/Unity.app/Contents/MacOS/Unity"
  elif [[ "$detected_os" == "linux" ]]; then
    echo "/opt/unity/Editor/$unity_version/Editor/Unity"
  else
    echo ""
  fi
}

# Ki·ªÉm tra Unity project
check_unity_project() {
  if [[ ! -d "$UNITY_PROJECT_DIR" ]]; then
    echo -e "${RED}[L·ªñI] Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c Unity project t·∫°i: $UNITY_PROJECT_DIR${NC}"
    return 1
  fi

  if [[ ! -d "$UNITY_PROJECT_DIR/Assets" ]]; then
    echo -e "${RED}[L·ªñI] Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c Assets trong Unity project${NC}"
    return 1
  fi

  if [[ ! -d "$UNITY_PROJECT_DIR/ProjectSettings" ]]; then
    echo -e "${RED}[L·ªñI] Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c ProjectSettings trong Unity project${NC}"
    return 1
  fi

  return 0
}

# Chuy·ªÉn ƒë·ªïi platform (s·ª≠ d·ª•ng tham s·ªë -buildTarget)
switch_platform() {
  local platform="$1"
  local unity_version="$2"
  local unity_executable=$(get_unity_path "$unity_version")
  local log_file="$LOG_DIR/switch_platform_${platform}.log"
  local build_target=""
  
  # Chuy·ªÉn ƒë·ªïi platform th√†nh buildTarget c·ªßa Unity
  if [[ "$platform" == "android" ]]; then
    build_target="Android"
  elif [[ "$platform" == "ios" ]]; then
    build_target="iOS"
  else
    echo -e "${RED}[L·ªñI] Platform kh√¥ng h·ª£p l·ªá: $platform${NC}"
    return 1
  fi

  # Ki·ªÉm tra Unity executable
  if [[ ! -f "$unity_executable" ]]; then
    echo -e "${RED}[L·ªñI] Kh√¥ng t√¨m th·∫•y Unity executable t·∫°i: $unity_executable${NC}"
    return 1
  fi

  echo -e "${YELLOW}Chuy·ªÉn ƒë·ªïi Unity platform sang $platform...${NC}"

  # Th·ª±c hi·ªán chuy·ªÉn ƒë·ªïi platform
  "$unity_executable" \
    -batchmode \
    -nographics \
    -silent-crashes \
    -logFile "$log_file" \
    -projectPath "$UNITY_PROJECT_DIR" \
    -buildTarget "$build_target" \
    -quit

  # Ki·ªÉm tra tr·∫°ng th√°i tho√°t
  local exit_status=$?
  if [[ $exit_status -ne 0 ]]; then
    echo -e "${RED}[L·ªñI] Chuy·ªÉn ƒë·ªïi platform th·∫•t b·∫°i v·ªõi m√£ l·ªói: $exit_status${NC}"
    echo -e "${RED}Xem log t·∫°i: $log_file${NC}"
    return 1
  fi

  echo -e "${GREEN}[OK] ƒê√£ chuy·ªÉn ƒë·ªïi Unity platform sang $platform${NC}"
  echo -e "${GREEN}Log t·∫°i: $log_file${NC}"
  return 0
}

# H√†m ch√≠nh
main() {
  local platform=$1
  local unity_version=${2:-"2022.3.57f1"}

  echo "=== CHUY·ªÇN ƒê·ªîI PLATFORM UNITY ==="
  echo "N·ªÅn t·∫£ng ƒë√≠ch: $platform"
  echo "Phi√™n b·∫£n Unity: $unity_version"

  # Ki·ªÉm tra platform
  if [[ ! "$platform" =~ ^(android|ios)$ ]]; then
    echo -e "${RED}[L·ªñI] Platform kh√¥ng h·ª£p l·ªá: $platform. H√£y s·ª≠ d·ª•ng android ho·∫∑c ios.${NC}"
    exit 1
  fi

  # Ki·ªÉm tra Unity project
  check_unity_project
  if [[ $? -ne 0 ]]; then
    exit 1
  fi

  # Chuy·ªÉn ƒë·ªïi platform
  switch_platform "$platform" "$unity_version"
  exit $?
}

# Ch·∫°y script
if [[ $# -lt 1 ]]; then
  echo "S·ª≠ d·ª•ng: $0 <platform> [unity_version]"
  echo "  <platform>      Platform ƒë√≠ch (android ho·∫∑c ios)"
  echo "  [unity_version] Phi√™n b·∫£n Unity (m·∫∑c ƒë·ªãnh: 2022.3.57f1)"
  exit 1
fi

main "$@" 